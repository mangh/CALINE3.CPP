#include <catch2/catch_test_macros.hpp>
#include <catch2/matchers/catch_matchers_floating_point.hpp>

#include <clocale>
#include <sstream>

#include "../CALINE3/JobReader.h"
#include "../CALINE3/Plume.h"

// Test input data (obtained using MSVC on Windows 11)
const char* test_data = R"sample(EXAMPLE FOUR                             60.100.   0.   0.12        1.
RECP. 1                  -350.       30.       1.8
RECP. 2                     0.       30.       1.8
RECP. 3                   750.      100.       1.8
RECP. 4                   850.       30.       1.8
RECP. 5                  -850.     -100.       1.8
RECP. 6                  -550.     -100.       1.8
RECP. 7                  -350.     -100.       1.8
RECP. 8                    50.     -100.       1.8
RECP. 9                   450.     -100.       1.8
RECP. 10                  800.     -100.       1.8
RECP. 11                 -550.       25.       1.8
RECP. 12                 -550.       25.       6.1
URBAN LOCATION: MULTIPLE LINKS, ETC.      6  4
LINK A              AG   500.     0.  3000.     0.   9700. 30.  0. 23.
LINK B              DP   500.     0.  1000.   100.   1200.150. -2. 13.
LINK C              AG -3000.     0.   500.     0.  10900. 30.  0. 23.
LINK D              AG -3000.   -75.  3000.   -75.   9300. 30.  0. 23.
LINK E              BR  -500.   200.  -500.  -300.   4000. 50. 6.1 27.
LINK F              BR  -100.   200.  -100.  -200.   5000. 50. 6.1 27.
 1.  0.6 1000.12.0
 1. 90.6 1000. 7.0
 1.180.6 1000. 5.0
 1.270.6 1000. 6.7
)sample";

// Expected test results (dimensionless mass concentrations)
double test_result[4][6][12] =
{
    {
        { 0, 0, 0, 0, 0, 0, 0, 0, 0.003599020054292486, 3637.390559311844, 0, 0 },
        { 0, 0, 0, 3236.299907432924, 0, 0, 0, 0, 0.04613257701588988, 1634.359708751526, 0, 0 },
        { 0, 0, 0, 0, 4087.377020257638, 4087.377020257638, 4087.377020257636, 4087.377020257638, 4087.372975997986, 0, 0, 0 },
        { 0, 0, 0, 0, 6869.794252139026, 6869.794252139024, 6869.794252138988, 6869.794252138959, 6869.794252139026, 6869.794252138945, 0, 0 },
        { 0, 0, 0, 0, 0, 344.5338728790495, 6.144968484332457e-05, 0, 0, 0, 26.05570596876021, 24.15222565974859 },
        { 0, 2.69809741004849e-05, 0, 0, 0, 0, 0, 7.68121060541557e-05, 0, 0, 0, 0 }
    },
    {
        { 6463.038065280547, 9125.068942351762, 3590.595384501098, 13687.5418442738, 3561.380761623859, 4008.12217234396, 4290.519643975559, 4495.200129565387, 4028.467465316988, 3511.980044877986, 5568.107535880818, 5527.629377960696 },
        { 1493.591456499636, 2455.852385782764, 2967.347972231538, 0.02122644158386859, 402.393257520658, 376.0989541735157, 319.5360829637788, 91.88900515574723, 0.03552498266101205, 0, 1192.060072908807, 1181.020695597263 },
        { 10137.13182135298, 6671.826148063545, 0, 0, 2100.827094160757, 1296.979414826188, 760.545023840283, 43.70092696667586, 0, 0, 13996.54756574129, 13331.76686721519 },
        { 4477.988035720154, 4122.271883657416, 1065.84302054355, 3030.923886249617, 17562.5655744398, 17280.475672064, 17073.6718058404, 16604.98404939407, 16041.05720045835, 15439.84208625416, 4949.446171218359, 4903.678005637524 },
        { 0, 0, 0, 0, 1268.197874893523, 2613.946549626125, 0, 0, 0, 0, 2613.946549626125, 2327.081806019316 },
        { 1853.864252247895, 0, 0, 0, 1044.249002697387, 1399.214560421933, 1853.852353621281, 0, 0, 0, 1404.925475542038, 1365.625633406494 }
    },
    {
        { 0, 0, 3637.390559311844, 6581.749994421873, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 0, 0, 2877.388437488567, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 7395.987107133865, 7395.987107133834, 0, 0, 0, 0, 0, 0, 0, 0, 8051.694346580234, 4375.08582925716 },
        { 3402.155274529723, 3402.155274529722, 2621.074610971759, 3402.155274529726, 0, 0, 0, 0, 0, 0, 3487.395072329911, 3020.259390607824 },
        { 0.0007976232763593813, 0, 0, 0, 0, 58.29360782771893, 7.764808022611737e-12, 0, 0, 0, 447.5642998496996, 425.9764000953567 },
        { 0, 0.02138309964122766, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
    },
    {
        { 0, 0, 0.07748231256128799, 3911.955741165004, 0, 0, 0, 0, 0, 0.9654844261097277, 0, 0 },
        { 0, 0, 0.08058233790834304, 5957.357474538628, 0, 0, 0, 0, 0, 0.2286814756260916, 0, 0 },
        { 16370.80000296717, 16925.51116649758, 6005.399173229517, 13574.4039025464, 3856.091568553078, 4369.812767655481, 4677.575413691427, 5223.476970441488, 5693.356078356144, 6053.505138117187, 18613.51482995197, 17910.22193699103 },
        { 3717.258990986726, 4122.27188365742, 2300.092221205771, 4917.649900093399, 15343.4346093337, 15881.25577234434, 16192.8523460257, 16729.83350371621, 17179.00150808995, 17517.59551519057, 3728.372361394127, 3687.78315605612 },
        { 1850.354438185931, 1067.61784565156, 584.2089383337542, 623.0321269631299, 0, 0, 1850.35443818593, 1018.794507384126, 773.1933837201398, 649.9395506391573, 0, 0 },
        { 0, 2698.933444104862, 961.7128788736674, 960.0198361599666, 0, 0, 0, 2312.943047713638, 1257.155502706021, 925.0008742985433, 0, 0 }
    }
};

namespace CALINE3::Metrology
{
    TEST_CASE( "check CALINE3 calculations" , "[CALINE3]")
    {
        std::setlocale(LC_ALL, "en_US.UTF-8");
        std::istringstream input_stream{test_data };
        JobReader job_reader{ "INTERNAL DATA", input_stream };

        REQUIRE(job_reader.Read());

        const Job& site = job_reader.LastJob();

        SECTION("calculation of mass concentration", "[CALINE3]")
        {
            for (auto const& meteo : site.Meteos)
            {
                for (auto const& link : site.Links)
                {
                    Plume plume(site, meteo, link);
                    for (auto const& receptor : site.Receptors)
                    {
                        Microgram_Meter3 mc = plume.ConcentrationAt(receptor);

                        CHECK_THAT(mc.value(), Catch::Matchers::WithinRel(
                                test_result[meteo.ORDINAL][link.ORDINAL][receptor.ORDINAL],
                                1.0e-15
                            )
                        );
                    }
                }
            }
        }
    }
}
